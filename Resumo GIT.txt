- GIT

	É um sistema de versionamento: você controla as modificações de um projeto por meio de versões chamadas "commits".

	Um projeto controlado pelo Git é chamado de repositório de versionamento. Tipicamente uma cópia "oficial" do repositório fica salvo em um servidor (repositório remoto). Cada pessoa que trabalha no projeto pode fazer uma cópia do repositório para seu computador (repositório local). A pessoa então faz suas alterações no projeto (novos commits) e depois salva as alterações no servidor.

	Operações principais:

	CLONE  - Copia o repositório remoto para seu computador
	PULL   - Atualiza seu repositório local em relação ao repositório remoto
	COMMIT - Salva uma nova versão (tipicamente no seu repositório local)
	PUSH   - Envia o repositório local para o repositório remoto

	O Git pode ser usado por ou por terminal de comando, ou por um aplicativo gráfico.

- Github

	É um serviço de hospedagem de repositórios Git remotos.

	Caracteristicas:

	Possui uma interface gráfica web: github.com
	É uma plataforma social (usuários, página de perfil, seguidores, colaboração, etc.). Dica: currículo!
	Maior serviço do mundo de hospedagem de projetos de código aberto
	Modelo de cobrança: gratuito para projetos de código aberto, pago para projetos privados
	Alternativas: BitBucket, GitLab, etc.

- Instalação do GIT

	Opções recomendadas:

	Use Vim as Git's default editor
	Use Git from the Windows Command Prompt
	Use the OpenSSL library
	Checkout Windows-style, commit Unity-style line endings
	Use MinTTY
	DESMARCAR: Enable Git Credential Manager

	É recomendado configurar o Windows para exibir os arquivos ocultos e a extensão dos arquivos para facilitar o uso do Git.

- Configurar usuário do GIT

	Executar no terminal do GIT:

	git config --list
	git config --global user.name "<nome do usuário>"
	git config --global user.email "<email do usuário>"
	git config --list

- Alterar nome padrão da branch

	Executar no terminal do GIT:

	git config --list
	git config --global init.defaultBranch main
	git config --list

- Criar acesso ao Github via SSH

	Executar no terminal do GIT:

	eval `ssh-agent -s`
	cd ~/
	mkdir .ssh
	cd ~/.ssh
	ssh-keygen -t rsa -b 4096 -C "github@fernandoribeira.com.br"
	Apertar tecla "ENTER" 3 vezes
	ssh-add ~/.ssh/id_rsa

	Copiar os dados da chave publica:

	cat id_rsa.pub

	Adicionar esta chave no painel de controle do Github, na parte de "SSH and GPG keys".

- Arquivo .gitignore

	Para quê serve o arquivo .gitignore?

	Serve para informar o GIT quais arquivos devem ser ignorados no sincronismo, isso faz com que arquivos d elog ou compilados por exemplo nao sejam enviados ao Github. Isso econimiza tempo no sincronismo e espaço no projeto.

	Como saber o que colocar no arquivo .gitignore?

	Normalmente ao criar um projeto no Github temos um campo para selecionar um template para o .gitignore, podemos utilizar o mesmo sem problema e ir adequando posteriormente caso necessário.

	Mas voce pode criar um arquivo .gitignore manualmente no projeto  e inserir os arquivos e extensões de arquivos que quiser.

- Criar um novo projeto / primeiro commit

	Passos:

	1. Crie um novo projeto no seu ambiente de desenvolvimento

	2. Crie um novo repositório no Github
	ATENÇÃO: se seu ambiente de desenvolvimento não gera o arquivo .gitignore automaticamente, escolha o seu tipo desejado de .gitignore na tela de criação de repositório do Github

	3. Abra um terminal GIT na pasta do seu projeto

	4. IMPORTANTE: certifique-se de estar identificado no Git do seu computador (nome e email) executando os comandos de configuração de usuário
	
	5. Faça os comandos a seguir

	- Inicia um novo repositório local na pasta do seu projeto
	git init

	-Associa seu repositório local ao repositório remoto, com o apelido de "origin"
	ATENÇÃO: troque pelo caminho do seu repositório do Github
	git remote add origin <URL SSH do meu projeto>

	- Verifica status dos arquivos
	git status

	- Adiciona todos arquivos ao stage
	git add .

	- Verifica status dos arquivos
	git status

	- Salva uma nova versão do projeto
	git commit -m "<mensagem de commit>"

	- Envia o repositório local para o repositório remoto
	ATENÇÃO: nas próximas vezes basta fazer: git push
	git push -u origin main

- Salvando uma nova versão

	Passos:

	- Verifica status dos arquivos
	git status

	- Adiciona todos arquivos ao stage
	git add .

	- Verifica status dos arquivos
	git status

	- Salva uma nova versão do projeto
	git commit -m "<mensagem de commit>"

	- Envia o repositório local para o repositório remoto
	git push

- Trabalhando (clonando) um projeto existente

	Passos:

	1 - Clonar o repositório do Github

	git clone <URL SSH do projeto>

	2 - Importar o projeto no programa editor

	3 - Altere o que você precisar no projeto

	4 - Commitar as mudanças feitas no projeto

	git status
	git add .
	git commit -m "<mensagem de commit>"
	git log --oneline

	5 - Salvar projeto atualizado no seu Github

	git push

- Verificando o histórico de versões

	Para log mais completo executar "git log"

	Para log mais simples executar "git log --oneline"

- Status dos arquivos

	untracked - arquivos novos
	modifief - arquivos ja comitados anteriormente que foram modificados
	deleted - arquivos ja comitados anteriormente que foram excluidos

- A sequência de commits deve ser respeitada

	Sempre execute o comando "git pull" para sincronizar seu repositorio local antes de editar o codigo e antes de executar um commit.

	Caso seu repositorio local esteja diferente do remoto e voce tente efetuar um comando git push será apresentado erro.

- Comparar o arquivo atual (que esta editando) com o original

	git diff <nome do arquivo>

- Adicionando arquivos ao stage

	Todos os arquivos: git add .
	Arquivo especifico git add <nome do arquivo>

- Revomendo arquivo do stage

	Todos os arquivos: git reset
	Arquivo especifico git reset <nome do arquivo>

- Desfazendo tudo o que foi feito e voltar aos dados da branch original

	git reset
	git clean -df
	git checkout -- .

- Git checkout

	Permite modificar temporariamente os arquivos do projeto ao estado de um dado commit ou branch

	Código do commit, HEAD:

	Cada commit possui um código, que pode ser utilizado para referenciar o commit
	O último commit do histórico do branch corrente também pode ser referenciado pela palavra HEAD
	É possível referenciar um commit N versões antes de HEAD usando ~N, por exemplo:
	HEAD~1 (penúltimo commit)
	HEAD~2 (antepenúltimo commit)

	IMPORTANTE: antes de fazer o checkout para voltar para HEAD, certifique-se de que não haja mudanças nos arquivos. Se você acidentalmente mudou alguma coisa, desfaça as modificações usando:

	git reset
	git clean -df
	git checkout -- .

	Para voltar ao commit original basta executar:

	git checkout main

- Como resolver push rejeitado

	Não é permitido enviar um push se seu repositório local está diferente em relação ao histórico do repositório remoto.

	Para evitar isso sempre execute o comando "git pull" antes de iniciar seu trabalho e antes de efetuar o commit.

	Mas caso o problema ocorra ao tentar efetuar o push é necessário efetuar uma ação de integração.

	Caso os arquivos modificados nao sejam os mesmos entre o repo remoto e local sera feito um merge automatico do repo remoto com o local, gerando um commit automatico, resolvendo assim o problema e permitindo a execução do pull.

	Será aberta uma tela do Vim para inserção da mensagem de commit, podemos deixar a mensagem padrão e salvar / sair.

	Mas caso os arquivos modificados sejam os mesmos entre o repo remoto e local não sera feito um merge automatico, teremos de atuar manualmente na correção / merge dos arquivos.

	Após tentar a execução do pull e a falha ser apresentada, o Git entra em modo merge manual, executando o comando git status é informado qual arquivo esta com conflito.

	Abrindo este arquivo no editor o Git irá inserir automaticamente (junto do código do commit) todas as informações no arquivo.

	Devemos editar o arquivo, deixar da forma correta e efetuar um novo processo de commit / pull.

- Kit de primeiros socorros

	Problema 																					Comando

	Duvida em relação ao conteudo do arquivo 													git diff

	Remover arquivos da area de stage 															git reset

	Quero desfazer tudo que eu fiz desde o último commit 										git reset
																								git clean -df
																								git checkout -- .

	Preciso remover o último commit, porém mantendo os arquivos do jeito que estão 				git reset --soft HEAD~1

	Preciso remover qualquer commit, porém mantendo os arquivos do jeito que estão 				git reset --soft <código do commit>

	Preciso remover o último commit, inclusive as alterações nos arquivos						git reset --hard HEAD~1

	Preciso remover qualquer commit, inclusive as alterações nos arquivos						git reset --hard <código do commit>

	Quero alterar temporariamente os arquivos do projeto 										git checkout <código do commit>
	de modo a ficarem no estado do commit informado
	ATENÇÃO: não podem haver modificações não commitadas no projeto
	NOTA: para voltar ao último commit faça: 													git checkout master

	Preciso apagar o último commit no Github 													git push -f origin HEAD^:master

	Quero mudar o meu repositório remoto "origin" 												git remote set-url origin <URL do projeto>

	Entrei no VIM por engano. Como sair sem salvar? 											Tecle ESC, depois digite :q! e tecle ENTER

	Entrei no VIM por engano. Como sair salvando?	 											Tecle ESC, depois digite :wq! e tecle ENTER

 	Como atualizar o repositório local em relação ao remoto 									git pull

 	Como sobrescrever um histórico no Github 													git push -f
